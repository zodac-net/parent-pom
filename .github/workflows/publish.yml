name: Publish

on:
  push:
    branches: [master]
    paths:
      - "pom.xml"
      - "VERSION"

permissions:
  contents: write
  actions: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      has_changes: "false"
      changelog_content: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for pushing tags
          submodules: true

      - name: Fetch tags
        run: git fetch --tags

      - name: Configure git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Read current version
        id: version
        run: |
          version=$(cat VERSION)
          echo "Using version: ${version}"
          echo "version=$version" >> $GITHUB_OUTPUT

      # Set up Java & Maven to execute tests
      - name: Cache local .m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.18.0
        with:
          checkout-fetch-depth: 0
          java-distribution: "temurin"
          java-version: "25"
          maven-version: "3.9.11"

      - name: Release version
        run: mvn versions:set -DremoveSnapshot

      - name: Run Java lints and tests with Maven (including SonarQube)
        env:
          SONARQUBE_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}
          SONARQUBE_PAT: ${{ secrets.SONARQUBE_RW_PAT }}
        run: mvn clean install -Dall -Dsonarqube

      - name: Import GPG keys
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg    

          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --batch --import

          # Mark all keys as trusted
          gpg --list-keys --with-colons | awk -F: '/^fpr:/ {print $10 ":6:"}' | gpg --import-ownertrust

          gpg --list-secret-keys
          gpg --list-keys
        env:
          GNUPGHOME: ~/.gnupg

      - name: Configure Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${MAVEN_USERNAME}</username>
                <password>${MAVEN_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}

      - name: Publish package
        run: mvn deploy -Dpublish
        env:
          GNUPGHOME: ~/.gnupg
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "prev_tag=${PREV_TAG}" >> "${GITHUB_OUTPUT}"

      - name: Generate categorized changelog
        id: changelog
        run: .github/scripts/generate_changelog.sh "${{ steps.prev_tag.outputs.prev_tag }}"

      - name: Bump patch version in VERSION file
        run: .github/scripts/bump_version.sh "${{ steps.version.outputs.version }}"

      - name: Tag current version in git
        if: env.has_changes == 'true'
        run: git tag ${{ steps.version.outputs.version }}

      - name: Push commit and tag if there were changes
        if: env.has_changes == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          tags: "true"

      - name: Create GitHub Release
        if: env.has_changes == 'true'
        uses: ncipollo/release-action@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: v${{ steps.version.outputs.version }}
          tag: ${{ steps.version.outputs.version }}
          body: |
            ## Changes since ${{ steps.prev_tag.outputs.prev_tag }}:

            ${{ env.changelog_content }}

      - name: Summary
        if: env.has_changes == 'true'
        run: |
          echo "GitHub release created for version: ${{ steps.version.outputs.version }}"
